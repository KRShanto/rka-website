// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------
// Enums
// ------------

enum Role {
  ADMIN
  USER
  TRAINER
}

enum Gender {
  MALE
  FEMALE
}

enum AdmissionStatus {
  PENDING
  REJECTED
  APPROVED
}

// Optional, but common in BD contexts
enum BloodGroup {
  A_POS
  A_NEG
  B_POS
  B_NEG
  O_POS
  O_NEG
  AB_POS
  AB_NEG
}

// Payments
enum PaymentType {
  MONTHLY_FEE
  EXAM_FEE
  REGISTRATION_FEE
  EVENT_FEE
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  REJECTED
}

// ------------
// Models
// ------------

model Branch {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notices   Notice[]
  users     User[]
}

model Gallery {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notice {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  branch      Branch   @relation(fields: [branchId], references: [id])
  branchId    String
}

model User {
  id           String    @id @default(cuid())
  name         String
  username     String    @unique
  password     String
  email        String?
  phone        String?
  motherName   String?
  fatherName   String?
  imageUrl     String?
  currentBelt  String?
  currentDan   Int?
  danExamDates Json?
  weight       Float?
  gender       Gender?
  joinDate     DateTime?
  role         Role      @default(USER)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  branch       Branch?   @relation(fields: [branchId], references: [id])
  branchId     String?
  payments     Payment[]
}

model Admission {
  id          String          @id @default(cuid())
  name        String
  fatherName  String
  motherName  String
  dateOfBirth DateTime
  bloodGroup  BloodGroup?
  email       String
  phone       String
  gender      Gender
  imageUrl    String?
  status      AdmissionStatus @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Payment {
  id                 String        @id @default(cuid())
  type               PaymentType
  amount             Decimal       @db.Decimal(10, 2)
  bkashTransactionId String?       @unique
  status             PaymentStatus @default(PENDING)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id])
  userId             String
}
